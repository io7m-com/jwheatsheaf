<?xml version="1.0" encoding="UTF-8" ?>

<div xmlns="http://www.w3.org/1999/xhtml">
  <h3>User documentation</h3>

  <h4>Motivation</h4>

  <p>
    <a href="https://openjfx.io/">JavaFX</a> provides <tt>FileChooser</tt> and <tt>DirectoryChooser</tt>
    classes that delegate to the operating system's default file chooser implementation on each platform.
    This is in contrast to the file chooser abstractions available in <a
    href="https://docs.oracle.com/en/java/javase/13/docs/api/java.desktop/javax/swing/JFileChooser.html">Swing</a>,
    which provides a single non-native file chooser that behaves identically on all platforms. While native file
    choosers do have certain benefits, it also means that the file choosers in JavaFX applications cannot be easily
    styled to match the rest of the application. It also means that applications, for better or worse, behave
    slightly differently on each platform.  The purpose of the <tt>jwheatsheaf</tt> package is to provide a
    configurable, styleable, consistent, non-native file chooser implementation analogous to the <tt>JFileChooser</tt>
    class.
  </p>

  <h4>Usage</h4>

  <p>
    The simplest possible code that can open a file chooser and select at most one file:
  </p>

  <pre class="code"><![CDATA[final Window mainWindow = ...;

final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .build();

final var choosers = JWFileChoosers.create();
final var chooser = choosers.create(mainWindow, configuration);
final List<Path> selected = chooser.showAndWait();
]]></pre>

  <p>
    The above code will open a modal file chooser that can choose files from the default Java NIO
    filesystem, and will return the selected files (if any) in <tt>selected</tt>.
  </p>

  <h4>Configuration</h4>

  <p>
    The <tt>JWFileChooserConfiguration</tt> class comes with numerous configuration parameters,
    with the <tt>FileSystem</tt> parameter being the only mandatory parameter.
  </p>

  <h5>Filtering</h5>

  <p>
    A list of file filters can be passed to file choosers via the <tt>fileFilters</tt> configuration
    parameter. File choosers are <i>always</i> equipped with a file filter that displays all files
    (in other words, does no filtering) even if an empty list is passed in <tt>fileFilters</tt>. The
    list of file filters will appear in the menu at the bottom of file chooser dialogs, allowing the
    user to select one to filter results.
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .addFileFilters(new ExampleFilterRejectAll())
    .addFileFilters(new ExampleFilterXML())
    .build();
]]></pre>

  <h5>Action</h5>

  <p>
    By default, file choosers are configured to allow the selection of at most one file. The "OK"
    button cannot be clicked until one file is selected. Other behaviours can be specified by
    setting the <i>action</i> for the chooser:
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setAction(OPEN_EXISTING_MULTIPLE)
    .build();
]]></pre>

  <h5>Home Directory</h5>

  <p>
    If a home directory path is specified (typically a value taken from <tt>System.getProperty("user.home")</tt>),
    a button will be displayed in the UI that allows for navigating directly to this path.
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setHomeDirectory(someHomeDirectoryPath)
    .build();
]]></pre>

  <h5>Custom Titles</h5>

  <p>
    The titles of file chooser dialogs can be adjusted in the configuration. By default, a generic "Please select…"
    title is used if no other value is specified.
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setTitle("Export to PNG…")
    .build();
]]></pre>

  <h5>Recent Items</h5>

  <p>
    The file chooser can display a list of recently used items. It is the responsibility of
    applications using the file chooser to save and otherwise manage this list between
    application runs; the <tt>jwheatsheaf</tt> file chooser simply displays whatever list
    of paths is passed in:
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setRecentFiles(List.of(
      Paths.get("/tmp/x"),
      Paths.get("/tmp/y"),
      Paths.get("/tmp/z"),
    ))
    .build();
]]></pre>

  <h5>Directory Creation</h5>

  <p>
    The file chooser contains a button that allows for the creation of new directories.
    This can be disabled.
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setAllowDirectoryCreation(false)
    .build();
]]></pre>

  <h5>Icons</h5>

  <p>
    The file chooser provides a <tt>JWFileImageSetType</tt> interface that allows for
    defining the icons used by the user interface. Users wishing to use custom icon
    sets should implement this interface and pass in an instance to the configuration:
  </p>

  <pre class="code"><![CDATA[final var configuration =
  JWFileChooserConfiguration.builder()
    .setFileSystem(FileSystems.getDefault())
    .setFileImageSet(new CustomIcons())
    .build();
]]></pre>

  <h4><a id="css-styling" href="#css-styling">Styling</a></h4>

  <p>
    The <tt>jwheatsheaf</tt> file chooser is styleable via CSS. By default, the file chooser applies
    no styling and uses whatever is the default for the application. A custom stylesheet and icon set
    can be supplied via the <tt>JWFileChooserConfiguration</tt> class, allowing for very different
    visuals:
  </p>

  <p>
    <img src="select0.png" alt="Basic light theme" width="640" />
  </p>

  <p>
    <img src="select1.png" alt="Olive theme" width="640" />
  </p>

  <p>
    All of the elements in a file chooser window are assigned CSS identifiers.
  </p>

  <p>
    <img src="css.png" alt="CSS identifiers" width="640" />
  </p>

  <table>
    <thead>
      <tr>
        <th>Identifier</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><tt>fileChooserPathMenu</tt></td>
        <td>The path menu used to select directory ancestors.</td>
      </tr>
      <tr>
        <td><tt>fileChooserUpButton</tt></td>
        <td>The button used to move to the parent directory.</td>
      </tr>
      <tr>
        <td><tt>fileChooserHomeButton</tt></td>
        <td>The button used to move to the home directory.</td>
      </tr>
      <tr>
        <td><tt>fileChooserCreateDirectoryButton</tt></td>
        <td>The button used to create directories.</td>
      </tr>
      <tr>
        <td><tt>fileChooserSelectDirectButton</tt></td>
        <td>The button used to enter paths directly.</td>
      </tr>
      <tr>
        <td><tt>fileChooserSearchField</tt></td>
        <td>The search field used to filter the directory table.</td>
      </tr>
      <tr>
        <td><tt>fileChooserDirectoryTable</tt></td>
        <td>The table that shows the contents of the current directory.</td>
      </tr>
      <tr>
        <td><tt>fileChooserSourceList</tt></td>
        <td>The list view that shows the recent items and the filesystem roots.</td>
      </tr>
      <tr>
        <td><tt>fileChooserNameField</tt></td>
        <td>The field that shows the selected file name.</td>
      </tr>
      <tr>
        <td><tt>fileChooserFilterMenu</tt></td>
        <td>The menu that allows for selecting file filters.</td>
      </tr>
      <tr>
        <td><tt>fileChooserCancelButton</tt></td>
        <td>The cancel button.</td>
      </tr>
      <tr>
        <td><tt>fileChooserOKButton</tt></td>
        <td>The confirmation button.</td>
      </tr>
      <tr>
        <td><tt>fileChooserProgress</tt></td>
        <td>The indeterminate progress indicator shown during I/O operations.</td>
      </tr>
    </tbody>
  </table>

  <h4>JavaDoc</h4>

  <p>
    See the <a href="documentation/apidocs/index.html">JavaDoc</a> for more information.
  </p>

</div>
